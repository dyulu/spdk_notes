
https://spdk.io/doc/blobfs.html

https://github.com/facebook/rocksdb/blob/master/tools/db_bench.cc

==== Kernel requirements

# Does not build on Ubuntu 18.4, kernel 4.15
/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/libfuse3.so: undefined reference to `fcntl64@GLIBC_2.28'

$ ldd --version
ldd (Ubuntu GLIBC 2.27-3ubuntu1) 2.27

$ dpkg --get-selections | grep fuse
fuse						install
libfuse-dev					install
libfuse2:amd64					install
libfuse3-3:amd64				install
libfuse3-dev					install

# Build fine on Debian 10, Buster, kernel 4.19

$ ldd --version
ldd (Debian GLIBC 2.28-10) 2.28

$ dpkg --get-selections | grep fuse
libfuse2:amd64					install
libfuse3-3:amd64				install
libfuse3-dev					install

$ gcc -v
......
gcc version 8.3.0 (Debian 8.3.0-6) 

$ apt install libgflags-dev
$ apt install libsnappy-dev
$ apt install zlib1g-dev
$ apt install libbz2-dev
$ apt install liblz4-dev
$ apt install libzstd-dev

$ ./db_bench -h
./db_bench: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.32' not found (required by /lib/x86_64-linux-gnu/libfuse3.so.3)

# Build fine on Ubuntu 20.4, kernel 5.4 

$ ldd --version
ldd (Ubuntu GLIBC 2.31-0ubuntu9.1) 2.31

$ dpkg --get-selections | grep fuse
fuse						install
libfuse2:amd64					install
libfuse3-3:amd64				install
libfuse3-dev					install

$ gcc -v
......
gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04) 

==== Build db_bench

# Required libraries
$ apt install libgflags-dev    # a library that handles command line flags processing
$ apt install libsnappy-dev
$ apt install zlib1g-dev
$ apt install libbz2-dev
$ apt install liblz4-dev
$ apt install libzstd-dev

# scripts/, build/bin, build/examples
# test/blobfs/blobfs.sh, test/blobfs/fuse/fuse, test/blobfs/mkfs/mkfs, test/blobfs/rocksdb/*
git clone https://github.com/spdk/spdk.git
cd spdk
./configure --with-rdma --with-nvme-cuse --with-fuse
make

# db_bench
cd ..
git clone -b 6.15.fb https://github.com/spdk/rocksdb.git rocksdb_6_15_fb
cd rocksdb_6_15_fb
make -j`nproc` db_bench SPDK_DIR=../spdk                                       # Debug mode
export USE_RTTI=1 && make -j`nproc` db_bench DEBUG_LEVEL=0 SPDK_DIR=../spdk    # Release mode

# Code changes to support RocksDB in SPDK repo
$(SPDK_ROOT_DIR)/lib/rocksdb/spdk.rocksdb.mk
$(SPDK_ROOT_DIR)/lib/rocksdb/env_spdk.cca       # Define NewSpdkEnv

# Code changes to support SPDK in RocksDB repo: db_bench integration only
C symbol: NewSpdkEnv
  File             Function                Line
0 env.h            <global>                1669 Env* NewSpdkEnv(Env* base_env, const std::string& fsname, const std::string& confname,
1 c.cc             rocksdb_create_spdk_env 4113 result->rep = rocksdb::NewSpdkEnv(rocksdb::Env::Default(), dir, conf, bdev, cache_size_in_mb);
2 db_bench_tool.cc db_bench_tool           7348 FLAGS_env = rocksdb::NewSpdkEnv(rocksdb::Env::Default(), FLAGS_db, FLAGS_spdk, FLAGS_spdk_bdev,
                                                FLAGS_spdk_cache_size);

C symbol: SpdkInitializeThread
  File              Function Line
0 env.h             <global> 1673 void SpdkInitializeThread(void );
1 threadpool_imp.cc <global>  280 SpdkInitializeThread();

C symbol: rocksdb_create_spdk_env
  File Function                Line
0 c.h  <global>                1715 extern ROCKSDB_LIBRARY_API rocksdb_env_t* rocksdb_create_spdk_env(
1 c.cc rocksdb_create_spdk_env 4110 rocksdb_env_t* rocksdb_create_spdk_env(


$ git log
commit 01a1964e0ac65a86291bbf0e9298738e33809896 (HEAD -> 6.15.fb, origin/6.15.fb)
Author: Young Tack Jin <youngtack.jin@circuitblvd.com>
Date:   Fri Dec 14 14:29:22 2018 -0800

    Add SpdkEnv C API
    
    ref. https://spdk.io/doc/blobfs.html
    
    env = rocksdb_create_spdk_env(
            "/dbroot",
            "/usr/local/etc/spdk/rocksdb.conf",
            "Nvme0n1",
            4096);
    rocksdb_options_set_env(options, env);
    
    Signed-off-by: Maciej Szwed <maciej.szwed@intel.com>
    Signed-off-by: Young Tack Jin <youngtack.jin@circuitblvd.com>
    Reviewed-on: https://review.gerrithub.io/c/spdk/rocksdb/+/437477 (spdk-v5.14.3 branch)
    Change-Id: I8580b2abb323b63e554e35693720ae927e8513d8
    Reviewed-on: https://review.spdk.io/gerrit/c/spdk/rocksdb/+/6486
    Reviewed-by: Ben Walker <benjamin.walker@intel.com>
    Reviewed-by: Jim Harris <james.r.harris@intel.com>
    Reviewed-by: Tomasz Zawadzki <tomasz.zawadzki@intel.com>
    Tested-by: Jim Harris <james.r.harris@intel.com>

commit 7938bd29201f2a78321b10b2d59500b10dc2ab42
Author: Changpeng Liu <changpeng.liu@intel.com>
Date:   Mon Aug 27 21:06:33 2018 -0400

    Add SPDK BlobFS integration.
    
    This patches adds support for using the SPDK BlobFS as the
    storage engine for a RocksDB database.
    
    The Makefile changes assume that SPDK and DPDK have been
    built according to the SPDK README (https://github/spdk/spdk)
    and share the same parent directory as the RocksDB repository.
    
    Flags to configure the SPDK storage engine:
    
    spdk -
      Defines the name of the SPDK configuration file.  If
      omitted, will use PosixEnv instead of SpdkEnv.  This
      configuration file defines the block devices that may
      contain the BlobFS for the database.
    
    spdk_bdev -
      Defines the name of the SPDK block device which
      contains the BlobFS for this database.
    
    spdk_cache_size -
      Defines the amount of userspace cache memory used by
      BlobFS.  Specified in terms of megabytes (MB).  Default
      is 4096 (4GB).
    
    Signed-off-by: Jim Harris <james.r.harris@intel.com>
    Signed-off-by: Ben Walker <benjamin.walker@intel.com>
    Signed-off-by: Maciej Szwed <maciej.szwed@intel.com>
    Reviewed-on: https://review.gerrithub.io/423596 (spdk-v5.14.3 branch)
    Change-Id: I3f0c11e2bb69913ef1318f4eb6b8dc339b095306
    Reviewed-on: https://review.spdk.io/gerrit/c/spdk/rocksdb/+/6485
    Reviewed-by: Tomasz Zawadzki <tomasz.zawadzki@intel.com>

==== Running bd_bench on Debian 11, Bullseye, kernel 5.10

spdk/test/common/autotest_common.sh
spdk/test/common/applications.sh
spdk/test/common/build_config.sh    # Created by ./configure
spdk/test/rpc_plugins/
spdk/mk/config.mk                   # Created by ./configure
spdk/scripts/common.sh
/usr/include/infiniband/verbs.h
/usr/include/iscsi/iscsi.h
/usr/include/fuse3/
/usr/local/include/fuse3/
/usr/include/liburing/io_uring.h

# Commented out git and make in test/blobfs/rocksdb/rocksdb.sh
#if [ -z "$SKIP_GIT_CLEAN" ]; then
#       git clean -x -f -d
#fi

# $MAKE db_bench $MAKEFLAGS $MAKECONFIG DEBUG_LEVEL=0 SPDK_DIR=../spdk EXTRA_CXXFLAGS="$EXTRA_CXXFLAGS"


apt install libibverbs1
apt install librdmacm1
apt install libfuse3-3
apt install libaio1
apt install libsnappy1v5
apt install libgflags2.2

# Make sure you have at least 5GB of memory allocated for huge pages.
# By default, the SPDK setup.sh script only allocates 2GB.
$ HUGEMEM=5120 scripts/setup.sh

# Create an NVMe section in the configuration file
$ scripts/gen_nvme.sh --json-with-subsystems > ~/myrocksdb.json    # NVME controllers will be named as Nvme0, Nvme1, Nvme2, and so on

# Create an empty SPDK blobfs for testing. Usage: ./mkfs <conffile> <bdevname>
$ test/blobfs/mkfs/mkfs ~/myrocksdb.json Nvme0n1                            # Create blobfs from bdev Nvme0n1
......
Initializing filesystem on bdev Nvme0n1...done.

# Run spdk/test/blobfs/rocksdb/rocksdb.sh, which creates output directory with the results
# /root/spdk/scripts/gen_nvme.sh --json-with-subsystems > /root/spdk/test/blobfs/rocksdb/rocksdb.json
# /root/spdk/test/blobfs/mkfs/mkfs /root/spdk/test/blobfs/rocksdb/rocksdb.json Nvme0n1 --tpoint-group-mask 0x80
# HUGEMEM=3072 HUGENODE=0 /root/spdk/scripts/setup.sh
# /root/spdk/../rocksdb/db_bench --flagfile=insert_flags.txt
# /root/spdk/../rocksdb/db_bench --flagfile=overwrite_flags.txt
# /root/spdk/../rocksdb/db_bench --flagfile=readwrite_flags.txt
# /root/spdk/../rocksdb/db_bench --flagfile=writesync_flags.txt
#/root/spdk/../rocksdb/db_bench --flagfile=randread_flags.txt
# /root/spdk/build/examples/blobcli -j /root/spdk/test/blobfs/rocksdb/rocksdb.json -b Nvme0n1 --tpoint-group-mask 0x80
# rm -f /root/spdk/test/blobfs/rocksdb/rocksdb.json
$ spdk/test/blobfs/rocksdb/rocksdb.sh
......
$ tree
.
├── output                        # Test result folder for spdk/test/blobfs/rocksdb/rocksdb.sh
│   ├── rocksdb
│   │   ├── bsdump.txt
│   │   ├── insert_db_bench.txt
│   │   ├── insert_flags.txt
│   │   ├── insert_trace.gz
│   │   ├── overwrite_db_bench.txt
│   │   ├── overwrite_flags.txt
│   │   ├── overwrite_trace.gz
│   │   ├── randread_db_bench.txt
│   │   ├── randread_flags.txt
│   │   ├── randread_trace.gz
│   │   ├── readwrite_db_bench.txt
│   │   ├── readwrite_flags.txt
│   │   ├── readwrite_trace.gz
│   │   ├── writesync_db_bench.txt
│   │   ├── writesync_flags.txt
│   │   └── writesync_trace.gz
│   ├── test_completions.txt
│   └── timing.txt
├── rocksdb                       # spdk/test/blobfs/rocksdb/rocksdb.sh expects bd_bench is here
│   └── db_bench
├── spdk                          # spdk repository: trimmed, good enough to run the RocksDB tests
│   ├── build                     # Generated by make
│   │   ├── bin
│   │   │   ├── iscsi_tgt
│   │   │   ├── iscsi_top
│   │   │   ├── nvmf_tgt
│   │   │   ├── spdk_dd
│   │   │   ├── spdk_lspci
│   │   │   ├── spdk_tgt
│   │   │   ├── spdk_top
│   │   │   ├── spdk_trace
│   │   │   ├── spdk_trace_record
│   │   │   └── vhost
│   │   └── examples
│   │       ├── abort
│   │       ├── accel_perf
│   │       ├── arbitration
│   │       ├── blobcli
│   │       ├── cmb_copy
│   │       ├── hello_bdev
│   │       ├── hello_blob
│   │       ├── hello_sock
│   │       ├── hello_world
│   │       ├── hotplug
│   │       ├── identify
│   │       ├── interrupt_tgt
│   │       ├── ioat_perf
│   │       ├── led
│   │       ├── lsvmd
│   │       ├── nvme_manage
│   │       ├── nvmf
│   │       ├── perf
│   │       ├── pmr_persistence
│   │       ├── reconnect
│   │       ├── verify
│   │       └── zipf
│   ├── include
│   │   └── spdk
│   │       └── pci_ids.h
│   ├── scripts
│   │   ├── arm_cross_compile.sh
│   │   ├── bash-completion
│   │   │   └── spdk
│   │   ├── bpf
│   │   │   ├── gen_enums.sh
│   │   │   ├── nvmf.bt
│   │   │   ├── readv.bt
│   │   │   ├── send_msg.bt
│   │   │   ├── syscalls.bt
│   │   │   └── trace.py
│   │   ├── bpftrace.sh
│   │   ├── ceph
│   │   │   ├── ceph.conf
│   │   │   ├── start.sh
│   │   │   └── stop.sh
│   │   ├── check_format.sh
│   │   ├── common.sh
│   │   ├── config_converter.py
│   │   ├── core-collector.sh
│   │   ├── detect_cc.sh
│   │   ├── dpdk_mem_info.py
│   │   ├── eofnl
│   │   ├── fio-wrapper
│   │   ├── gdb_macros.py
│   │   ├── genconfig.py
│   │   ├── gen_ftl.sh
│   │   ├── gen_nvme.sh
│   │   ├── get-pmr
│   │   ├── histogram.py
│   │   ├── iostat.py
│   │   ├── pc_libs.sh
│   │   ├── pc_modules.sh
│   │   ├── pc.sh
│   │   ├── perf
│   │   │   ├── nvme
│   │   │   │   ├── fio_test.conf
│   │   │   │   ├── README
│   │   │   │   ├── run_fio_test.py
│   │   │   │   └── run_fio_test.sh
│   │   │   ├── nvmf
│   │   │   │   ├── common.py
│   │   │   │   ├── config.json
│   │   │   │   ├── README.md
│   │   │   │   ├── run_nvmf.py
│   │   │   │   └── set_xps_rxqs
│   │   │   └── vhost
│   │   │       ├── fio_test.conf
│   │   │       └── run_vhost_test.py
│   │   ├── pkgdep
│   │   │   ├── arch.sh
│   │   │   ├── centos.sh
│   │   │   ├── clear-linux-os.sh
│   │   │   ├── common.sh
│   │   │   ├── debian.sh
│   │   │   ├── fedora.sh
│   │   │   ├── freebsd.sh
│   │   │   ├── requirements.txt
│   │   │   ├── rhel.sh
│   │   │   ├── sles.sh
│   │   │   └── ubuntu.sh
│   │   ├── pkgdep.sh
│   │   ├── posix.txt
│   │   ├── prep_benchmarks.sh
│   │   ├── qat_setup.sh
│   │   ├── rpc
│   │   │   ├── app.py
│   │   │   ├── bdev.py
│   │   │   ├── blobfs.py
│   │   │   ├── client.py
│   │   │   ├── cmd_parser.py
│   │   │   ├── env_dpdk.py
│   │   │   ├── helpers.py
│   │   │   ├── idxd.py
│   │   │   ├── __init__.py
│   │   │   ├── ioat.py
│   │   │   ├── iscsi.py
│   │   │   ├── log.py
│   │   │   ├── lvol.py
│   │   │   ├── nbd.py
│   │   │   ├── notify.py
│   │   │   ├── nvme.py
│   │   │   ├── nvmf.py
│   │   │   ├── pmem.py
│   │   │   ├── sock.py
│   │   │   ├── subsystem.py
│   │   │   ├── trace.py
│   │   │   ├── vhost.py
│   │   │   └── vmd.py
│   │   ├── rpc_http_proxy.py
│   │   ├── rpc.py
│   │   ├── rxe_cfg_small.sh
│   │   ├── setup.sh
│   │   ├── spdkcli
│   │   │   ├── __init__.py
│   │   │   ├── ui_node_iscsi.py
│   │   │   ├── ui_node_nvmf.py
│   │   │   ├── ui_node.py
│   │   │   └── ui_root.py
│   │   ├── spdkcli.py
│   │   ├── sync_dev_uevents.sh
│   │   └── vagrant
│   │       ├── autorun-spdk.conf
│   │       ├── create_nvme_img.sh
│   │       ├── create_vbox.sh
│   │       ├── local.conf
│   │       ├── README.md
│   │       ├── run-autorun.sh
│   │       ├── update.sh
│   │       └── Vagrantfile
│   └── test
│       ├── blobfs
│       │   ├── blobfs.sh
│       │   ├── fuse
│       │   │   └── fuse
│       │   ├── mkfs
│       │   │   └── mkfs
│       │   └── rocksdb
│       │       ├── common_flags.txt
│       │       ├── postprocess.py
│       │       ├── rocksdb_commit_id
│       │       └── rocksdb.sh         # This is the script to run
│       ├── common
│       │   ├── applications.sh
│       │   ├── autotest_common.sh
│       │   └── build_config.sh        # Generated by ./configure
│       ├── rpc
│       │   ├── rpc_plugin.py
│       │   └── rpc.sh
│       ├── rpc_client
│       │   ├── Makefile
│       │   ├── rpc_client.sh
│       │   └── rpc_client_test.c
│       └── rpc_plugins
│           ├── rpc_plugin.py
│           └── scheduler_plugin.py

# Flags files for db_bench
/root/output/rocksdb $ cat insert_flags.txt
--disable_seek_compaction=1
--mmap_read=0
--statistics=1
--histogram=1
--key_size=16
--value_size=1000
--block_size=4096
--cache_size=0
--bloom_bits=10
--cache_numshardbits=4
--open_files=500000
--verify_checksum=1
--db=/mnt/rocksdb
--sync=0
--compression_type=none
--stats_interval=1000000
--compression_ratio=1
--disable_data_sync=0
--target_file_size_base=67108864
--max_write_buffer_number=3
--max_bytes_for_level_multiplier=10
--max_background_compactions=10
--num_levels=10
--delete_obsolete_files_period_micros=3000000
--max_grandparent_overlap_factor=10
--stats_per_interval=1
--max_bytes_for_level_base=10485760
--benchmarks=fillseq
--threads=1
--disable_wal=1
--use_existing_db=0
--num=20000000
--spdk=/root/spdk/test/blobfs/rocksdb/rocksdb.json  # Required, name of the SPDK config file; use SpdkEnv instead of default PosixEnv
--spdk_bdev=Nvme0n1                                 # Required, name of the SPDK block device which contains the BlobFS to be used for testing
--spdk_cache_size=2048                              # Optional, amount in MB of userspace cache memory used by SPDK, default 4096 (4GB)
/root/output/rocksdb $ cat overwrite_flags.txt
....   # Commnon flags
--benchmarks=overwrite
--threads=1
--duration=20
--disable_wal=1
--use_existing_db=1
--num=20000000
--spdk=/root/spdk/test/blobfs/rocksdb/rocksdb.json
--spdk_bdev=Nvme0n1
--spdk_cache_size=2048
/root/output/rocksdb $ cat randread_flags.txt
....   # Commnon flags
--benchmarks=readrandom
--threads=16
--duration=20
--disable_wal=1
--use_existing_db=1
--num=20000000
--spdk=/root/spdk/test/blobfs/rocksdb/rocksdb.json
--spdk_bdev=Nvme0n1
--spdk_cache_size=2048
/root/output/rocksdb $ cat readwrite_flags.txt
....   # Commnon flags
--benchmarks=readwhilewriting
--threads=4
--duration=20
--disable_wal=1
--use_existing_db=1
--num=20000000
--spdk=/root/spdk/test/blobfs/rocksdb/rocksdb.json
--spdk_bdev=Nvme0n1
--spdk_cache_size=2048
/root/output/rocksdb $ cat writesync_flags.txt
....   # Commnon flags
--benchmarks=overwrite
--threads=1
--duration=20
--disable_wal=0
--use_existing_db=1
--sync=1
--num=20000000
--spdk=/root/spdk/test/blobfs/rocksdb/rocksdb.json
--spdk_bdev=Nvme0n1
--spdk_cache_size=2048

# Manually run insert tests
/root/output/rocksdb $ /root/spdk/scripts/gen_nvme.sh --json-with-subsystems > /root/spdk/test/blobfs/rocksdb/rocksdb.json
/root/output/rocksdb $ /root/spdk/test/blobfs/mkfs/mkfs /root/spdk/test/blobfs/rocksdb/rocksdb.json Nvme0n1
/root/output/rocksdb $ /root/rocksdb/db_bench --flagfile=insert_flags.txt
......

# Mount an SPDK BlobFS as a kernel filesystem for inspection or debug
$ mkdir -p /mnt/fuse
$ /root/spdk/test/blobfs/fuse/fuse /root/spdk/test/blobfs/rocksdb/rocksdb.json Nvme0n1 /mnt/fuse
......
Mounting filesystem on bdev Nvme0n1 to path /mnt/fuse...
done.
blobfs_fuse.c: 268:fuse_loop_new_thread: *NOTICE*: Start to loop blobfs on bdev Nvme0n1 mounted at /mnt/fuse
#### On another terminal, examine the contents of /mnt/fuse ###
$ ls /mnt/fuse
......
$ cat /mnt/fuse/CURRENT
MANIFEST-000003
$ cat /mnt/fuse/IDENTITY
015ded90-308d-4b20-8c6d-99e3f79fcb04
$ cat /mnt/fuse/LOCK
$ cat /mnt/fuse/OPTIONS-000006
# This is a RocksDB option file.
#
# For detailed file format spec, please refer to the example file
# in examples/rocksdb_option_file_example.ini
#

[Version]
  rocksdb_version=6.15.5
  options_file_version=1.1

[DBOptions]
  max_background_flushes=-1
  compaction_readahead_size=0
  wal_bytes_per_sync=0
  bytes_per_sync=0
  max_open_files=500000
  stats_history_buffer_size=1048576
  stats_dump_period_sec=600
  stats_persist_period_sec=600
  delete_obsolete_files_period_micros=21600000000
  max_total_wal_size=0
  strict_bytes_per_sync=false
  delayed_write_rate=8388608
  avoid_flush_during_shutdown=false
  writable_file_max_buffer_size=1048576
  max_subcompactions=1
  base_background_compactions=-1
  max_background_compactions=10
  max_background_jobs=2
  allow_data_in_errors=false
  avoid_unnecessary_blocking_io=false
  log_readahead_size=0
  manual_wal_flush=false
  two_write_queues=false
  write_dbid_to_manifest=false
  allow_ingest_behind=false
  avoid_flush_during_recovery=false
  best_efforts_recovery=false
  info_log_level=INFO_LEVEL
  access_hint_on_compaction_start=NORMAL
  write_thread_max_yield_usec=100
  max_write_batch_group_size_bytes=1048576
  write_thread_slow_yield_usec=3
  wal_recovery_mode=kPointInTimeRecovery
  allow_concurrent_memtable_write=true
  db_host_id=__hostname__
  unordered_write=false
  enable_pipelined_write=true
  fail_if_options_file_error=false
  persist_stats_to_disk=false
  WAL_size_limit_MB=0
  bgerror_resume_retry_interval=1000000
  wal_dir=/mnt/rocksdb
  log_file_time_to_roll=0
  keep_log_file_num=1000
  WAL_ttl_seconds=0
  db_write_buffer_size=0
  table_cache_numshardbits=4
  max_file_opening_threads=16
  random_access_max_buffer_size=1048576
  max_bgerror_resume_count=2147483647
  skip_checking_sst_file_sizes_on_db_open=false
  skip_stats_update_on_db_open=false
  track_and_verify_wals_in_manifest=false
  dump_malloc_stats=true
  paranoid_checks=true
  is_fd_close_on_exec=true
  max_manifest_file_size=1073741824
  error_if_exists=false
  use_adaptive_mutex=false
  atomic_flush=false
  enable_thread_tracking=false
  create_missing_column_families=false
  create_if_missing=true
  manifest_preallocation_size=4194304
  use_fsync=false
  allow_2pc=false
  recycle_log_file_num=0
  use_direct_io_for_flush_and_compaction=false
  use_direct_reads=false
  allow_mmap_writes=false
  preserve_deletes=false
  enable_write_thread_adaptive_yield=true
  max_log_file_size=0
  allow_fallocate=true
  allow_mmap_reads=false
  new_table_reader_for_compaction_inputs=true
  advise_random_on_open=true
  

[CFOptions "default"]
  bottommost_compression=kDisableCompressionOption
  bottommost_compression_opts={enabled=false;parallel_threads=1;zstd_max_train_bytes=0;strategy=0;max_dict_bytes=0;level=32767;window_bits=-14;}
  sample_for_compression=0
  blob_file_size=268435456
  compaction_options_universal={allow_trivial_move=false;stop_style=kCompactionStopStyleTotalSize;compression_size_percent=-1;max_size_amplification_percent=200;max_merge_width=4294967295;min_merge_width=2;size_ratio=1;}
  compaction_options_fifo={allow_compaction=true;max_table_files_size=0;}
  prefix_extractor=nullptr
  max_bytes_for_level_multiplier_additional=1:{1}:{1}:{1}:{1}:{1}:{1}
  max_bytes_for_level_base=10485760
  memtable_whole_key_filtering=false
  memtable_prefix_bloom_size_ratio=0.000000
  enable_blob_files=false
  target_file_size_base=67108864
  memtable_huge_page_size=0
  max_successive_merges=0
  inplace_update_num_locks=10000
  max_sequential_skip_in_iterations=8
  arena_block_size=8388608
  target_file_size_multiplier=1
  max_write_buffer_number=3
  write_buffer_size=67108864
  blob_compression_type=kNoCompression
  compression=kNoCompression
  level0_stop_writes_trigger=36
  level0_slowdown_writes_trigger=20
  level0_file_num_compaction_trigger=4
  ttl=0
  max_compaction_bytes=1677721600
  blob_garbage_collection_age_cutoff=0.250000
  compression_opts={enabled=false;parallel_threads=1;zstd_max_train_bytes=0;strategy=0;max_dict_bytes=0;level=32767;window_bits=-14;}
  enable_blob_garbage_collection=false
  soft_pending_compaction_bytes_limit=68719476736
  paranoid_file_checks=false
  periodic_compaction_seconds=0
  check_flush_compaction_key_order=true
  min_blob_size=0
  hard_pending_compaction_bytes_limit=137438953472
  disable_auto_compactions=false
  max_bytes_for_level_multiplier=10.000000
  report_bg_io_stats=false
  compaction_pri=kMinOverlappingRatio
  compaction_filter_factory=nullptr
  comparator=leveldb.BytewiseComparator
  bloom_locality=0
  compaction_style=kCompactionStyleLevel
  min_write_buffer_number_to_merge=1
  max_write_buffer_size_to_maintain=0
  max_write_buffer_number_to_maintain=0
  merge_operator=nullptr
  memtable_factory=SkipListFactory
  memtable_insert_with_hint_prefix_extractor=nullptr
  num_levels=10
  force_consistency_checks=true
  optimize_filters_for_hits=false
  compaction_filter=nullptr
  level_compaction_dynamic_level_bytes=false
  inplace_update_support=false
  table_factory=BlockBasedTable
  
[TableOptions/BlockBasedTable "default"]
  pin_top_level_index_and_filter=false
  block_align=false
  read_amp_bytes_per_bit=0
  verify_compression=false
  enable_index_compression=true
  whole_key_filtering=true
  optimize_filters_for_memory=false
  index_block_restart_interval=1
  block_restart_interval=16
  block_size=4096
  format_version=4
  partition_filters=false
  block_size_deviation=10
  no_block_cache=true
  checksum=kCRC32c
  data_block_hash_table_util_ratio=0.750000
  index_shortening=kShortenSeparatorsAndSuccessor
  data_block_index_type=kDataBlockBinarySearch
  hash_index_allow_collision=true
  filter_policy=rocksdb.BuiltinBloomFilter
  metadata_block_size=4096
  index_type=kBinarySearch
  metadata_cache_options={unpartitioned_pinning=kFallback;partition_pinning=kFallback;top_level_index_pinning=kFallback;}
  pin_l0_filter_and_index_blocks_in_cache=false
  cache_index_and_filter_blocks_with_high_priority=true
  cache_index_and_filter_blocks=false
  flush_block_policy_factory=FlushBlockBySizePolicyFactory

==== bd_bench help

./db_bench --help
db_bench: 
USAGE:
./db_bench [OPTIONS]...

  Flags from /build/gflags-0sowem/gflags-2.2.2/src/gflags.cc:
    -flagfile (load flags from file) type: string default: ""
    -fromenv (set flags from the environment [use 'export FLAGS_flag1=value'])
      type: string default: ""
    -tryfromenv (set flags from the environment if present) type: string
      default: ""
    -undefok (comma-separated list of flag names that it is okay to specify on
      the command line even if the program does not define a flag with that
      name.  IMPORTANT: flags in this list that have arguments MUST use the
      flag=value format) type: string default: ""

  Flags from /build/gflags-0sowem/gflags-2.2.2/src/gflags_completions.cc:
    -tab_completion_columns (Number of columns to use in output for tab
      completion) type: int32 default: 80
    -tab_completion_word (If non-empty, HandleCommandLineCompletions() will
      hijack the process and attempt to do bash-style command line flag
      completion on this value.) type: string default: ""

  Flags from /build/gflags-0sowem/gflags-2.2.2/src/gflags_reporting.cc:
    -help (show help on all flags [tip: all flags can have two dashes])
      type: bool default: false currently: true
    -helpfull (show help on all flags -- same as -help) type: bool
      default: false
    -helpmatch (show help on modules whose name contains the specified substr)
      type: string default: ""
    -helpon (show help on the modules named by this flag value) type: string
      default: ""
    -helppackage (show help on all modules in the main package) type: bool
      default: false
    -helpshort (show help on only the main module for this program) type: bool
      default: false
    -helpxml (produce an xml version of help) type: bool default: false
    -version (show version and build info and exit) type: bool default: false



  Flags from tools/db_bench_tool.cc:
    -advise_random_on_open (Advise random access on table file open) type: bool
      default: true
    -allow_concurrent_memtable_write (Allow multi-writers to update mem tables
      in parallel.) type: bool default: true
    -base_background_compactions (DEPRECATED) type: int32 default: -1
    -batch_size (Batch size) type: int64 default: 1
    -benchmark_read_rate_limit (If non-zero, db_bench will rate-limit the reads
      from RocksDB. This is the global rate in ops/second.) type: uint64
      default: 0
    -benchmark_write_rate_limit (If non-zero, db_bench will rate-limit the
      writes going into RocksDB. This is the global rate in bytes/second.)
      type: uint64 default: 0
    -benchmarks (Comma-separated list of operations to run in the specified
      order. Available benchmarks:
      	fillseq       -- write N values in sequential key order in async mode
      	fillseqdeterministic       -- write N values in the specified key order
      and keep the shape of the LSM tree
      	fillrandom    -- write N values in random key order in async mode
      	filluniquerandomdeterministic       -- write N values in a random key
      order and keep the shape of the LSM tree
      	overwrite     -- overwrite N values in random key order in async mode
      	fillsync      -- write N/1000 values in random key order in sync mode
      	fill100K      -- write N/1000 100K values in random order in async mode
      	deleteseq     -- delete N keys in sequential order
      	deleterandom  -- delete N keys in random order
      	readseq       -- read N times sequentially
      	readtocache   -- 1 thread reading database sequentially
      	readreverse   -- read N times in reverse order
      	readrandom    -- read N times in random order
      	readmissing   -- read N missing keys in random order
      	readwhilewriting      -- 1 writer, N threads doing random reads
      	readwhilemerging      -- 1 merger, N threads doing random reads
      	readwhilescanning     -- 1 thread doing full table scan, N threads doing
      random reads
      	readrandomwriterandom -- N threads doing random-read, random-write
      	updaterandom  -- N threads doing read-modify-write for random keys
      	xorupdaterandom  -- N threads doing read-XOR-write for random keys
      	appendrandom  -- N threads doing read-modify-write with growing values
      	mergerandom   -- same as updaterandom/appendrandom using merge operator.
      Must be used with merge_operator
      	readrandommergerandom -- perform N random read-or-merge operations. Must
      be used with merge_operator
      	newiterator   -- repeated iterator creation
      	seekrandom    -- N random seeks, call Next seek_nexts times per seek
      	seekrandomwhilewriting -- seekrandom and 1 thread doing overwrite
      	seekrandomwhilemerging -- seekrandom and 1 thread doing merge
      	crc32c        -- repeated crc32c of 4K of data
      	xxhash        -- repeated xxHash of 4K of data
      	acquireload   -- load N*1000 times
      	fillseekseq   -- write N values in sequential key, then read them by
      seeking to each key
      	randomtransaction     -- execute N random transactions and verify
      correctness
      	randomreplacekeys     -- randomly replaces N keys by deleting the old
      version and putting the new version
      
      	timeseries            -- 1 writer generates time series data and
      multiple readers doing random reads on id
      
      Meta operations:
      	compact     -- Compact the entire DB; If multiple, randomly choose one
      	compactall  -- Compact the entire DB
      	stats       -- Print DB stats
      	resetstats  -- Reset DB stats
      	levelstats  -- Print the number of files and bytes per level
      	sstables    -- Print sstable info
      	heapprofile -- Dump a heap profile (if supported by this port)
      	replay      -- replay the trace file specified with trace_file
      	getmergeoperands -- Insert lots of merge records which are a list of
      sorted ints for a key and then compare performance of lookup for another
      key by doing a Get followed by binary searching in the large sorted list
      vs doing a GetMergeOperands and binary searching in the operands which
      aresorted sub-lists. The MergeOperator used is sortlist.h
      ) type: string
      default: "fillseq,fillseqdeterministic,fillsync,fillrandom,filluniquerandomdeterministic,overwrite,readrandom,newiterator,newiteratorwhilewriting,seekrandom,seekrandomwhilewriting,seekrandomwhilemerging,readseq,readreverse,compact,compactall,multireadrandom,mixgraph,readseq,readtorowcache,readtocache,readreverse,readwhilewriting,readwhilemerging,readwhilescanning,readrandomwriterandom,updaterandom,xorupdaterandom,approximatesizerandom,randomwithverify,fill100K,crc32c,xxhash,compress,uncompress,acquireload,fillseekseq,randomtransaction,randomreplacekeys,timeseries,getmergeoperands"
    -blob_db_bytes_per_sync (Bytes to sync blob file at.) type: uint64
      default: 524288
    -blob_db_compression_type (Algorithm to use to compress blob in blob file)
      type: string default: "snappy"
    -blob_db_enable_gc (Enable BlobDB garbage collection.) type: bool
      default: false
    -blob_db_file_size (Target size of each blob file.) type: uint64
      default: 268435456
    -blob_db_gc_cutoff (Cutoff ratio for BlobDB garbage collection.)
      type: double default: 0.25
    -blob_db_is_fifo (Enable FIFO eviction strategy in BlobDB.) type: bool
      default: false
    -blob_db_max_db_size (Max size limit of the directory where blob files are
      stored.) type: uint64 default: 0
    -blob_db_max_ttl_range (TTL range to generate BlobDB data (in seconds). 0
      means no TTL.) type: uint64 default: 0
    -blob_db_min_blob_size (Smallest blob to store in a file. Blobs smaller
      than this will be inlined with the key in the LSM tree.) type: uint64
      default: 0
    -blob_db_ttl_range_secs (TTL bucket size to use when creating blob files.)
      type: uint64 default: 3600
    -block_align (Align data blocks on page size) type: bool default: false
    -block_cache_trace_file (Block cache trace file path.) type: string
      default: ""
    -block_cache_trace_max_trace_file_size_in_bytes (The maximum block cache
      trace file size in bytes. Block cache accesses will not be logged if the
      trace file size exceeds this threshold. Default is 64 GB.) type: int64
      default: 68719476736
    -block_cache_trace_sampling_frequency (Block cache trace sampling
      frequency, termed s. It uses spatial downsampling and samples accesses to
      one out of s blocks.) type: int32 default: 1
    -block_restart_interval (Number of keys between restart points for delta
      encoding of keys in data block.) type: int32 default: 16
    -block_size (Number of bytes in a block.) type: int32 default: 4096
    -bloom_bits (Bloom filter bits per key. Negative means use default
      settings.) type: int32 default: -1
    -bloom_locality (Control bloom filter probes locality) type: int32
      default: 0
    -bytes_per_sync (Allows OS to incrementally sync SST files to disk while
      they are being written, in the background. Issue one request for every
      bytes_per_sync written. 0 turns it off.) type: uint64 default: 0
    -cache_high_pri_pool_ratio (Ratio of block cache reserve for high pri
      blocks. If > 0.0, we also enable
      cache_index_and_filter_blocks_with_high_priority.) type: double
      default: 0
    -cache_index_and_filter_blocks (Cache index/filter blocks in block cache.)
      type: bool default: false
    -cache_numshardbits (Number of shards for the block cache is 2 **
      cache_numshardbits. Negative means use default settings. This is applied
      only if FLAGS_cache_size is non-negative.) type: int32 default: 6
    -cache_size (Number of bytes to use as a cache of uncompressed data)
      type: int64 default: 8388608
    -column_family_distribution (Comma-separated list of percentages, where the
      ith element indicates the probability of an op using the ith column
      family. The number of elements must be `num_hot_column_families` if
      specified; otherwise, it must be `num_column_families`. The sum of
      elements must be 100. E.g., if `num_column_families=4`, and
      `num_hot_column_families=0`, a valid list could be "10,20,30,40".)
      type: string default: ""
    -compaction_fadvice (Access pattern advice when a file is compacted)
      type: string default: "NORMAL"
    -compaction_pri (priority of files to compaction: by size or by data age)
      type: int32 default: 3
    -compaction_readahead_size (Compaction readahead size) type: int32
      default: 0
    -compaction_style (style of compaction: level-based, universal and fifo)
      type: int32 default: 0
    -compressed_cache_size (Number of bytes to use as a cache of compressed
      data.) type: int64 default: -1
    -compression_level (Compression level. The meaning of this value is
      library-dependent. If unset, we try to use the default for the library
      specified in `--compression_type`) type: int32 default: 32767
    -compression_max_dict_bytes (Maximum size of dictionary used to prime the
      compression library.) type: int32 default: 0
    -compression_parallel_threads (Number of threads for parallel compression.)
      type: int32 default: 1
    -compression_ratio (Arrange to generate values that shrink to this fraction
      of their original size after compression) type: double default: 0.5
    -compression_type (Algorithm to use to compress the database) type: string
      default: "snappy"
    -compression_zstd_max_train_bytes (Maximum size of training data passed to
      zstd's dictionary trainer.) type: int32 default: 0
    -cost_write_buffer_to_cache (The usage of memtable is costed to the block
      cache) type: bool default: false
    -cuckoo_hash_ratio (Hash ratio for Cuckoo SST table.) type: double
      default: 0.90000000000000002
    -data_block_hash_table_util_ratio (util ratio for data block hash index
      table. This is only valid if use_data_block_hash_index is set to true)
      type: double default: 0.75
    -db (Use the db with the following name.) type: string default: ""
    -db_write_buffer_size (Number of bytes to buffer in all memtables before
      compacting) type: int64 default: 0
    -delayed_write_rate (Limited bytes allowed to DB when soft_rate_limit or
      level0_slowdown_writes_trigger triggers) type: uint64 default: 8388608
    -delete_obsolete_files_period_micros (Ignored. Left here for backward
      compatibility) type: uint64 default: 0
    -deletepercent (Percentage of deletes out of reads/writes/deletes (used in
      RandomWithVerify only). RandomWithVerify calculates writepercent as (100
      - FLAGS_readwritepercent - deletepercent), so deletepercent must be
      smaller than (100 - FLAGS_readwritepercent)) type: int32 default: 2
    -deletes (Number of delete operations to do.  If negative, do FLAGS_num
      deletions.) type: int64 default: -1
    -disable_auto_compactions (Do not auto trigger compactions) type: bool
      default: false
    -disable_seek_compaction (Not used, left here for backwards compatibility)
      type: int32 default: 0
    -disable_wal (If true, do not write WAL for write.) type: bool
      default: false
    -dump_malloc_stats (Dump malloc stats in LOG ) type: bool default: true
    -duration (Time in seconds for the random-ops tests to run. When 0 then num
      & reads determine the test duration) type: int32 default: 0
    -enable_cpu_prio (Lower the background flush/compaction threads' CPU
      priority) type: bool default: false
    -enable_index_compression (Compress the index block) type: bool
      default: true
    -enable_io_prio (Lower the background flush/compaction threads' IO
      priority) type: bool default: false
    -enable_numa (Make operations aware of NUMA architecture and bind memory
      and cpus corresponding to nodes together. In NUMA, memory in same node as
      CPUs are closer when compared to memory in other nodes. Reads can be
      faster when the process is bound to CPU and memory of same node. Use
      "$numactl --hardware" command to see NUMA memory architecture.)
      type: bool default: false
    -enable_pipelined_write (Allow WAL and memtable writes to be pipelined)
      type: bool default: true
    -enable_write_thread_adaptive_yield (Use a yielding spin loop for brief
      writer thread waits.) type: bool default: true
    -env_uri (URI for registry Env lookup. Mutually exclusive with --hdfs and
      --fs_uri) type: string default: ""
    -expand_range_tombstones (Expand range tombstone into sequential regular
      tombstones.) type: bool default: false
    -expire_style (Style to remove expired time entries. Can be one of the
      options below: none (do not expired data), compaction_filter (use a
      compaction filter to remove expired data), delete (seek IDs and remove
      expired data) (used in TimeSeries only).) type: string default: "none"
    -fifo_compaction_allow_compaction (Allow compaction in FIFO compaction.)
      type: bool default: true
    -fifo_compaction_max_table_files_size_mb (The limit of total table file
      sizes to trigger FIFO compaction) type: uint64 default: 0
    -fifo_compaction_ttl (TTL for the SST Files in seconds.) type: uint64
      default: 0
    -file_opening_threads (If open_files is set to -1, this option set the
      number of threads that will be used to open files during DB::Open())
      type: int32 default: 16
    -finish_after_writes (Write thread terminates after all writes are
      finished) type: bool default: false
    -format_version (Format version of SST files.) type: int32 default: 4
    -fs_uri (URI for registry Filesystem lookup. Mutually exclusive with --hdfs
      and --env_uri. Creates a default environment with the specified
      filesystem.) type: string default: ""
    -hard_pending_compaction_bytes_limit (Stop writes if pending compaction
      bytes exceed this number) type: uint64 default: 137438953472
    -hard_rate_limit (DEPRECATED) type: double default: 0
    -hash_bucket_count (hash bucket count) type: int64 default: 1048576
    -hdfs (Name of hdfs environment. Mutually exclusive with --env_uri and
      --fs_uri) type: string default: ""
    -histogram (Print histogram of operation timings) type: bool default: false
    -identity_as_first_hash (the first hash function of cuckoo table becomes an
      identity function. This is only valid when key is 8 bytes) type: bool
      default: false
    -index_block_restart_interval (Number of keys between restart points for
      delta encoding of keys in index block.) type: int32 default: 1
    -index_shortening_mode (mode to shorten index: 0 for no shortening; 1 for
      only shortening separaters; 2 for shortening shortening and successor)
      type: int64 default: 2
    -index_with_first_key (Include first key in the index) type: bool
      default: false
    -inplace_update_num_locks (Number of RW locks to protect in-place memtable
      updates) type: uint64 default: 10000
    -inplace_update_support (Support in-place memtable update for smaller or
      same-size values) type: bool default: false
    -iter_k (The parameter 'k' of Generized Pareto Distribution
      f(x)=(1/sigma)*(1+k*(x-theta)/sigma)^-(1/k+1)) type: double default: 0
    -iter_sigma (The parameter 'sigma' of Generized Pareto Distribution
      f(x)=(1/sigma)*(1+k*(x-theta)/sigma)^-(1/k+1)) type: double default: 0
    -iter_theta (The parameter 'theta' of Generized Pareto Distribution
      f(x)=(1/sigma)*(1+k*(x-theta)/sigma)^-(1/k+1)) type: double default: 0
    -key_dist_a (The parameter 'a' of key access distribution model f(x)=a*x^b)
      type: double default: 0
    -key_dist_b (The parameter 'b' of key access distribution model f(x)=a*x^b)
      type: double default: 0
    -key_id_range (Range of possible value of key id (used in TimeSeries
      only).) type: int32 default: 100000
    -key_size (size of each key) type: int32 default: 16
    -keyrange_dist_a (The parameter 'a' of prefix average access distribution
      f(x)=a*exp(b*x)+c*exp(d*x)) type: double default: 0
    -keyrange_dist_b (The parameter 'b' of prefix average access distribution
      f(x)=a*exp(b*x)+c*exp(d*x)) type: double default: 0
    -keyrange_dist_c (The parameter 'c' of prefix average access
      distributionf(x)=a*exp(b*x)+c*exp(d*x)) type: double default: 0
    -keyrange_dist_d (The parameter 'd' of prefix average access
      distributionf(x)=a*exp(b*x)+c*exp(d*x)) type: double default: 0
    -keyrange_num (The number of key ranges that are in the same prefix group,
      each prefix range will have its key access distribution) type: int64
      default: 1
    -keys_per_prefix (control average number of keys generated per prefix, 0
      means no special handling of the prefix, i.e. use the prefix comes with
      the generated random number.) type: int64 default: 0
    -level0_file_num_compaction_trigger (Number of files in level-0 when
      compactions start) type: int32 default: 4
    -level0_slowdown_writes_trigger (Number of files in level-0 that will slow
      down writes.) type: int32 default: 20
    -level0_stop_writes_trigger (Number of files in level-0 that will trigger
      put stop.) type: int32 default: 36
    -level_compaction_dynamic_level_bytes (Whether level size base is dynamic)
      type: bool default: false
    -log_readahead_size (WAL and manifest readahead size) type: int32
      default: 0
    -max_background_compactions (The maximum number of concurrent background
      compactions that can occur in parallel.) type: int32 default: -1
    -max_background_flushes (The maximum number of concurrent background
      flushes that can occur in parallel.) type: int32 default: -1
    -max_background_jobs (The maximum number of concurrent background jobs that
      can occur in parallel.) type: int32 default: 2
    -max_bytes_for_level_base (Max bytes for level-1) type: uint64
      default: 268435456
    -max_bytes_for_level_multiplier (A multiplier to compute max bytes for
      level-N (N >= 2)) type: double default: 10
    -max_bytes_for_level_multiplier_additional (A vector that specifies
      additional fanout per level) type: string default: ""
    -max_compaction_bytes (Max bytes allowed in one compaction) type: uint64
      default: 0
    -max_num_range_tombstones (Maximum number of range tombstones to insert.)
      type: int64 default: 0
    -max_scan_distance (Used to define iterate_upper_bound (or
      iterate_lower_bound if FLAGS_reverse_iterator is set to true) when value
      is nonzero) type: int64 default: 0
    -max_successive_merges (Maximum number of successive merge operations on a
      key in the memtable) type: int32 default: 0
    -max_total_wal_size (Set total max WAL size) type: uint64 default: 0
    -max_write_buffer_number (The number of in-memory memtables. Each memtable
      is of size write_buffer_size bytes.) type: int32 default: 2
    -max_write_buffer_number_to_maintain (The total maximum number of write
      buffers to maintain in memory including copies of buffers that have
      already been flushed. Unlike max_write_buffer_number, this parameter does
      not affect flushing. This controls the minimum amount of write history
      that will be available in memory for conflict checking when Transactions
      are used. If this value is too low, some transactions may fail at commit
      time due to not being able to determine whether there were any write
      conflicts. Setting this value to 0 will cause write buffers to be freed
      immediately after they are flushed.  If this value is set to -1,
      'max_write_buffer_number' will be used.) type: int32 default: 0
    -max_write_buffer_size_to_maintain (The total maximum size of write buffers
      to maintain in memory including copies of buffers that have already been
      flushed. Unlike max_write_buffer_number, this parameter does not affect
      flushing. This controls the minimum amount of write history that will be
      available in memory for conflict checking when Transactions are used. If
      this value is too low, some transactions may fail at commit time due to
      not being able to determine whether there were any write conflicts.
      Setting this value to 0 will cause write buffers to be freed immediately
      after they are flushed.  If this value is set to -1,
      'max_write_buffer_number' will be used.) type: int64 default: 0
    -memtable_bloom_size_ratio (Ratio of memtable size used for bloom filter. 0
      means no bloom filter.) type: double default: 0
    -memtable_insert_with_hint_prefix_size (If non-zero, enable memtable insert
      with hint with the given prefix size.) type: int32 default: 0
    -memtable_use_huge_page (Try to use huge page in memtables.) type: bool
      default: false
    -memtable_whole_key_filtering (Try to use whole key bloom filter in
      memtables.) type: bool default: false
    -memtablerep () type: string default: "skip_list"
    -merge_keys (Number of distinct keys to use for MergeRandom and
      ReadRandomMergeRandom. If negative, there will be FLAGS_num keys.)
      type: int64 default: -1
    -merge_operator (The merge operator to use with the database.If a new merge
      operator is specified, be sure to use fresh database The possible merge
      operators are defined in utilities/merge_operators.h) type: string
      default: ""
    -mergereadpercent (Ratio of merges to merges&reads (expressed as
      percentage) for the ReadRandomMergeRandom workload. The default value 70
      means 70% out of all read and merge operations are merges. In other
      words, 7 merges for every 3 gets.) type: int32 default: 70
    -metadata_block_size (Max partition size when partitioning index/filters)
      type: int64 default: 4096
    -min_level_to_compress (If non-negative, compression starts from this
      level. Levels with number < min_level_to_compress are not compressed.
      Otherwise, apply compression_type to all levels.) type: int32 default: -1
    -min_write_buffer_number_to_merge (The minimum number of write buffers that
      will be merged togetherbefore writing to storage. This is cheap because
      it is anin-memory merge. If this feature is not enabled, then all
      thesewrite buffers are flushed to L0 as separate files and this increases
      read amplification because a get request has to check in all of these
      files. Also, an in-memory merge may result in writing less data to
      storage if there are duplicate records  in each of these individual write
      buffers.) type: int32 default: 1
    -mix_accesses (The total query accesses of mix_graph workload) type: int64
      default: -1
    -mix_ave_kv_size (The average key-value size of this workload) type: int64
      default: 512
    -mix_get_ratio (The ratio of Get queries of mix_graph workload)
      type: double default: 1
    -mix_max_scan_len (The max scan length of Iterator) type: int64
      default: 10000
    -mix_max_value_size (The max value size of this workload) type: int64
      default: 1024
    -mix_put_ratio (The ratio of Put queries of mix_graph workload)
      type: double default: 0
    -mix_seek_ratio (The ratio of Seek queries of mix_graph workload)
      type: double default: 0
    -mmap_read (Allow reads to occur via mmap-ing files) type: bool
      default: false
    -mmap_write (Allow writes to occur via mmap-ing files) type: bool
      default: false
    -multiread_batched (Use the new MultiGet API) type: bool default: false
    -multiread_stride (Stride length for the keys in a MultiGet batch)
      type: int64 default: 0
    -new_table_reader_for_compaction_inputs (If true, uses a separate file
      handle for compaction inputs) type: bool default: true
    -num (Number of key/values to place in database) type: int64
      default: 1000000
    -num_bottom_pri_threads (The number of threads in the bottom-priority
      thread pool (used by universal compaction only).) type: int32 default: 0
    -num_column_families (Number of Column Families to use.) type: int32
      default: 1
    -num_deletion_threads (Number of threads to do deletion (used in TimeSeries
      and delete expire_style only).) type: int32 default: 1
    -num_high_pri_threads (The maximum number of concurrent background
      compactions that can occur in parallel.) type: int32 default: 0
    -num_hot_column_families (Number of Hot Column Families. If more than 0,
      only write to this number of column families. After finishing all the
      writes to them, create new set of column families and insert to them.
      Only used when num_column_families > 1.) type: int32 default: 0
    -num_levels (The total number of levels) type: int32 default: 7
    -num_low_pri_threads (The maximum number of concurrent background
      compactions that can occur in parallel.) type: int32 default: 0
    -num_multi_db (Number of DBs used in the benchmark. 0 means single DB.)
      type: int32 default: 0
    -numdistinct (Number of distinct keys to use. Used in RandomWithVerify to
      read/write on fewer keys so that gets are more likely to find the key and
      puts are more likely to update the same key) type: int64 default: 1000
    -open_files (Maximum number of files to keep open at the same time (use
      default if == 0)) type: int32 default: -1
    -ops_between_duration_checks (Check duration limit every x ops) type: int32
      default: 1000
    -optimistic_transaction_db (Open a OptimisticTransactionDB instance.
      Required for randomtransaction benchmark.) type: bool default: false
    -optimize_filters_for_hits (Optimizes bloom filters for workloads for most
      lookups return a value. For now this doesn't create bloom filters for the
      max level of the LSM to reduce metadata that should fit in RAM. )
      type: bool default: false
    -optimize_filters_for_memory (Minimize memory footprint of filters)
      type: bool default: false
    -options_file (The path to a RocksDB options file.  If specified, then
      db_bench will run with the RocksDB options in the default column family
      of the specified options file. Note that with this setting, db_bench will
      ONLY accept the following RocksDB options related command-line arguments,
      all other arguments that are related to RocksDB options will be ignored:
      	--use_existing_db
      	--use_existing_keys
      	--statistics
      	--row_cache_size
      	--row_cache_numshardbits
      	--enable_io_prio
      	--dump_malloc_stats
      	--num_multi_db
      ) type: string default: ""
    -partition_index (Partition index blocks) type: bool default: false
    -partition_index_and_filters (Partition index and filter blocks.)
      type: bool default: false
    -perf_level (Level of perf collection) type: int32 default: 1
    -periodic_compaction_seconds (Files older than this will be picked up for
      compaction and rewritten to the same level) type: uint64
      default: 18446744073709551614
    -persist_stats_to_disk (whether to persist stats to disk) type: bool
      default: false
    -pin_l0_filter_and_index_blocks_in_cache (Pin index/filter blocks of L0
      files in block cache.) type: bool default: false
    -pin_top_level_index_and_filter (Pin top-level index of partitioned
      index/filter blocks in block cache.) type: bool default: false
    -prefix_same_as_start (Enforce iterator to return keys with prefix same as
      seek key.) type: bool default: false
    -prefix_size (control the prefix size for HashSkipList and plain table)
      type: int32 default: 0
    -print_malloc_stats (Print malloc stats to stdout after benchmarks finish.)
      type: bool default: false
    -random_access_max_buffer_size (Maximum windows randomaccess buffer size)
      type: int32 default: 1048576
    -range_tombstone_width (Number of keys in tombstone's range) type: int64
      default: 100
    -rate_limit_bg_reads (Use options.rate_limiter on compaction reads)
      type: bool default: false
    -rate_limit_delay_max_milliseconds (When hard_rate_limit is set then this
      is the max time a put will be stalled.) type: int32 default: 1000
    -rate_limiter_auto_tuned (Enable dynamic adjustment of rate limit according
      to demand for background I/O) type: bool default: false
    -rate_limiter_bytes_per_sec (Set options.rate_limiter value.) type: uint64
      default: 0
    -read_amp_bytes_per_bit (Number of bytes per bit to be used in block
      read-amp bitmap) type: int32 default: 0
    -read_cache_direct_read (Whether to use Direct IO for reading from read
      cache) type: bool default: true
    -read_cache_direct_write (Whether to use Direct IO for writing to the read
      cache) type: bool default: true
    -read_cache_path (If not empty string, a read cache will be used in this
      path) type: string default: ""
    -read_cache_size (Maximum size of the read cache) type: int64
      default: 4294967296
    -read_random_exp_range (Read random's key will be generated using
      distribution of num * exp(-r) where r is uniform number from 0 to this
      value. The larger the number is, the more skewed the reads are. Only used
      in readrandom and multireadrandom benchmarks.) type: double default: 0
    -read_with_latest_user_timestamp (If true, always use the current latest
      timestamp for read. If false, choose a random timestamp from the past.)
      type: bool default: true
    -readahead_size (Iterator readahead size) type: int32 default: 0
    -readonly (Run read only benchmarks.) type: bool default: false
    -reads (Number of read operations to do.  If negative, do FLAGS_num reads.)
      type: int64 default: -1
    -readwritepercent (Ratio of reads to reads/writes (expressed as percentage)
      for the ReadRandomWriteRandom workload. The default value 90 means 90%
      operations out of all reads and writes operations are reads. In other
      words, 9 gets for every 1 put.) type: int32 default: 90
    -report_bg_io_stats (Measure times spents on I/Os while in compactions. )
      type: bool default: false
    -report_file (Filename where some simple stats are reported to (if
      --report_interval_seconds is bigger than 0)) type: string
      default: "report.csv"
    -report_file_operations (if report number of file operations) type: bool
      default: false
    -report_interval_seconds (If greater than zero, it will write simple stats
      in CVS format to --report_file every N seconds) type: int64 default: 0
    -reverse_iterator (When true use Prev rather than Next for iterators that
      do Seek and then Next) type: bool default: false
    -row_cache_size (Number of bytes to use as a cache of individual rows (0 =
      disabled).) type: int64 default: 0
    -sample_for_compression (Sample every N block for compression) type: int64
      default: 0
    -secondary_path (Path to a directory used by the secondary instance to
      store private files, e.g. info log.) type: string default: ""
    -secondary_update_interval (Secondary instance attempts to catch up with
      the primary every secondary_update_interval seconds.) type: int32
      default: 5
    -seed (Seed base for random number generators. When 0 it is deterministic.)
      type: int64 default: 0
    -seek_missing_prefix (Iterator seek to keys with non-exist prefixes.
      Require prefix_size > 8) type: bool default: false
    -seek_nexts (How many times to call Next() after Seek() in fillseekseq,
      seekrandom, seekrandomwhilewriting and seekrandomwhilemerging)
      type: int32 default: 0
    -show_table_properties (If true, then per-level table properties will be
      printed on every stats-interval when stats_interval is set and
      stats_per_interval is on.) type: bool default: false
    -simcache_size (Number of bytes to use as a simcache of uncompressed data.
      Nagative value disables simcache.) type: int64 default: -1
    -sine_a (A in f(x) = A sin(bx + c) + d) type: double default: 1
    -sine_b (B in f(x) = A sin(bx + c) + d) type: double default: 1
    -sine_c (C in f(x) = A sin(bx + c) + d) type: double default: 0
    -sine_d (D in f(x) = A sin(bx + c) + d) type: double default: 1
    -sine_mix_rate (Enable the sine QPS control on the mix workload) type: bool
      default: false
    -sine_mix_rate_interval_milliseconds (Interval of which the sine wave
      read_rate_limit is recalculated) type: uint64 default: 10000
    -sine_mix_rate_noise (Add the noise ratio to the sine rate, it is between
      0.0 and 1.0) type: double default: 0
    -sine_write_rate (Use a sine wave write_rate_limit) type: bool
      default: false
    -sine_write_rate_interval_milliseconds (Interval of which the sine wave
      write_rate_limit is recalculated) type: uint64 default: 10000
    -skip_list_lookahead (Used with skip_list memtablerep; try linear search
      first for this many steps from the previous position) type: int32
      default: 0
    -soft_pending_compaction_bytes_limit (Slowdown writes if pending compaction
      bytes exceed this number) type: uint64 default: 68719476736
    -soft_rate_limit (DEPRECATED) type: double default: 0
    -spdk (Name of SPDK configuration file) type: string default: ""
    -spdk_bdev (Name of SPDK blockdev to load) type: string default: ""
    -spdk_cache_size (Size of SPDK filesystem cache (in MB)) type: uint64
      default: 4096
    -statistics (Database statistics) type: bool default: false
    -statistics_string (Serialized statistics string) type: string default: ""
    -stats_dump_period_sec (Gap between printing stats to log in seconds)
      type: uint64 default: 600
    -stats_history_buffer_size (Max number of stats snapshots to keep in
      memory) type: uint64 default: 1048576
    -stats_interval (Stats are reported every N operations when this is greater
      than zero. When 0 the interval grows over time.) type: int64 default: 0
    -stats_interval_seconds (Report stats every N seconds. This overrides
      stats_interval when both are > 0.) type: int64 default: 0
    -stats_level (stats level for statistics) type: int32 default: 3
    -stats_per_interval (Reports additional stats per interval when this is
      greater than 0.) type: int32 default: 0
    -stats_persist_period_sec (Gap between persisting stats in seconds)
      type: uint64 default: 600
    -stddev (Standard deviation of normal distribution used for picking keys
      (used in RandomReplaceKeys only).) type: double default: 2000
    -subcompactions (Maximum number of subcompactions to divide L0-L1
      compactions into.) type: uint64 default: 1
    -sync (Sync all writes to disk) type: bool default: false
    -table_cache_numshardbits () type: int32 default: 4
    -target_file_size_base (Target file size at level-1) type: int64
      default: 67108864
    -target_file_size_multiplier (A multiplier to compute target level-N file
      size (N >= 2)) type: int32 default: 1
    -thread_status_per_interval (Takes and report a snapshot of the current
      status of each thread when this is greater than 0.) type: int32
      default: 0
    -threads (Number of concurrent threads to run.) type: int32 default: 1
    -time_range (Range of timestamp that store in the database (used in
      TimeSeries only).) type: uint64 default: 100000
    -total_order_seek (Enable total order seek regardless of index format.)
      type: bool default: false
    -trace_file (Trace workload to a file. ) type: string default: ""
    -trace_replay_fast_forward (Fast forward trace replay, must >= 1. )
      type: int32 default: 1
    -trace_replay_threads (The number of threads to replay, must >=1.)
      type: int32 default: 1
    -transaction_db (Open a TransactionDB instance. Required for
      randomtransaction benchmark.) type: bool default: false
    -transaction_lock_timeout (If using a transaction_db, specifies the lock
      wait timeout in milliseconds before failing a transaction waiting on a
      lock) type: uint64 default: 100
    -transaction_set_snapshot (Setting to true will have each transaction call
      SetSnapshot() upon creation.) type: bool default: false
    -transaction_sets (Number of keys each transaction will modify (use in
      RandomTransaction only).  Max: 9999) type: uint64 default: 2
    -transaction_sleep (Max microseconds to sleep in between reading and
      writing a value (used in RandomTransaction only). ) type: int32
      default: 0
    -truth_db (Truth key/values used when using verify) type: string
      default: "/dev/shm/truth_db/dbbench"
    -universal_allow_trivial_move (Allow trivial move in universal compaction.)
      type: bool default: false
    -universal_compression_size_percent (The percentage of the database to
      compress for universal compaction. -1 means compress everything.)
      type: int32 default: -1
    -universal_max_merge_width (The max number of files to compact in universal
      style compaction) type: int32 default: 0
    -universal_max_size_amplification_percent (The max size amplification for
      universal style compaction) type: int32 default: 0
    -universal_min_merge_width (The minimum number of files in a single
      compaction run (for universal compaction only).) type: int32 default: 0
    -universal_size_ratio (Percentage flexibility while comparing file size
      (for universal compaction only).) type: int32 default: 0
    -unordered_write (Enable the unordered write feature, which provides higher
      throughput but relaxes the guarantees around atomic reads and immutable
      snapshots) type: bool default: false
    -use_adaptive_mutex (Use adaptive mutex) type: bool default: false
    -use_blob_db (Open a BlobDB instance. Required for large value benchmark.)
      type: bool default: false
    -use_block_based_filter (if use kBlockBasedFilter instead of kFullFilter
      for filter block. This is valid if only we use BlockTable) type: bool
      default: false
    -use_cache_memkind_kmem_allocator (Use memkind kmem allocator for block
      cache.) type: bool default: false
    -use_clock_cache (Replace default LRU block cache with clock cache.)
      type: bool default: false
    -use_cuckoo_table (if use cuckoo table format) type: bool default: false
    -use_data_block_hash_index (if use kDataBlockBinaryAndHash instead of
      kDataBlockBinarySearch. This is valid if only we use BlockTable)
      type: bool default: false
    -use_direct_io_for_flush_and_compaction (Use O_DIRECT for background flush
      and compaction writes) type: bool default: false
    -use_direct_reads (Use O_DIRECT for reading data) type: bool default: false
    -use_existing_db (If true, do not destroy the existing database.  If you
      set this flag and also specify a benchmark that wants a fresh database,
      that benchmark will fail.) type: bool default: false
    -use_existing_keys (If true, uses existing keys in the DB, rather than
      generating new ones. This involves some startup latency to load all keys
      into memory. It is supported for the same read/overwrite benchmarks as
      `-use_existing_db=true`, which must also be set for this flag to be
      enabled. When this flag is set, the value for `-num` will be ignored.)
      type: bool default: false
    -use_fsync (If true, issue fsync instead of fdatasync) type: bool
      default: false
    -use_hash_search (if use kHashSearch instead of kBinarySearch. This is
      valid if only we use BlockTable) type: bool default: false
    -use_keep_filter (Whether to use a noop compaction filter) type: bool
      default: false
    -use_plain_table (if use plain table instead of block-based table format)
      type: bool default: false
    -use_secondary_db (Open a RocksDB secondary instance. A primary instance
      can be running in another db_bench process.) type: bool default: false
    -use_single_deletes (Use single deletes (used in RandomReplaceKeys only).)
      type: bool default: true
    -use_stderr_info_logger (Write info logs to stderr instead of to LOG file.
      ) type: bool default: false
    -use_tailing_iterator (Use tailing iterator to access a series of keys
      instead of get) type: bool default: false
    -use_uint64_comparator (use Uint64 user comparator) type: bool
      default: false
    -user_timestamp_size (number of bytes in a user-defined timestamp)
      type: int32 default: 0
    -value_k (The parameter 'k' of Generized Pareto Distribution
      f(x)=(1/sigma)*(1+k*(x-theta)/sigma)^-(1/k+1)) type: double default: 0
    -value_sigma (The parameter 'theta' of Generized Pareto Distribution
      f(x)=(1/sigma)*(1+k*(x-theta)/sigma)^-(1/k+1)) type: double default: 0
    -value_size (Size of each value in fixed distribution) type: int32
      default: 100
    -value_size_distribution_type (Value size distribution type: fixed,
      uniform, normal) type: string default: "fixed"
    -value_size_max (Max size of random value) type: int32 default: 102400
    -value_size_min (Min size of random value) type: int32 default: 100
    -value_theta (The parameter 'theta' of Generized Pareto Distribution
      f(x)=(1/sigma)*(1+k*(x-theta)/sigma)^-(1/k+1)) type: double default: 0
    -verify_checksum (Verify checksum for every block read from storage)
      type: bool default: true
    -wal_bytes_per_sync (Allows OS to incrementally sync WAL files to disk
      while they are being written, in the background. Issue one request for
      every wal_bytes_per_sync written. 0 turns it off.) type: uint64
      default: 0
    -wal_dir (If not empty, use the given dir for WAL) type: string default: ""
    -wal_size_limit_MB (Set the size limit for the WAL Files in MB.)
      type: uint64 default: 0
    -wal_ttl_seconds (Set the TTL for the WAL Files in seconds.) type: uint64
      default: 0
    -writable_file_max_buffer_size (Maximum write buffer for Writable File)
      type: int32 default: 1048576
    -write_buffer_size (Number of bytes to buffer in memtable before
      compacting) type: int64 default: 67108864
    -write_thread_max_yield_usec (Maximum microseconds for
      enable_write_thread_adaptive_yield operation.) type: uint64 default: 100
    -write_thread_slow_yield_usec (The threshold at which a slow yield is
      considered a signal that other processes or threads want the core.)
      type: uint64 default: 3
    -writes (Number of write operations to do. If negative, do --num reads.)
      type: int64 default: -1
    -writes_before_delete_range (Number of writes before DeleteRange is called
      regularly.) type: int64 default: 0
    -writes_per_range_tombstone (Number of writes between range tombstones)
      type: int64 default: 0

